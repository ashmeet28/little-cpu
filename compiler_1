// This is the first self compiling compiler
// It does not include error detection and optimization

// SECTION: memory

var array_free_memory [16777216]uint8
var free_memory *uint8 = &(array_free_memory[0])

func memory_allocate(n int) *uint8 {
    var p *uint8 = free_memory

    if (n & 0x3) != 0 {
        n = n + 4 - (n & 0x3)
    }

    free_memory = free_memory + n

    return p
}

func memory_copy(s1 *uint8, s2 *uint8, n int) {
    var i int
    while i != n {
        *(s1 + i) = *(s2 + i)
        i = i + 1
    }
}

// SECTION: strings

func strings_compare(a *uint8, b *uint8) int {
    var i int
    var x uint8
    var y uint8

    while 1 {
        x = *(a + i)
        y = *(b + i)
        if x == y && x != 0 && y != 0 {
            i = i + 1
        } else if x == y {
            return 0
        } else if x < y {
            return -1
        } else if x > y {
            return 1
        }
    }
}

// SECTION: string

func string_length(s *uint8) int {
    var i int
    while (*(s + i)) != 0 {
        i = i + 1
    }
    return i
}

func string_parse_int(s *uint8) int {
    var i int
    var l int
    var is_negative uint8
    var a int

    var c uint8

    var array_pow_10 [10]int
    var pow_10 *int = &(array_pow_10[0])

    *(pow_10 + 0) = 1
    *(pow_10 + 1) = 10
    *(pow_10 + 2) = 100
    *(pow_10 + 3) = 1000
    *(pow_10 + 4) = 10000
    *(pow_10 + 5) = 100000
    *(pow_10 + 6) = 1000000
    *(pow_10 + 7) = 10000000
    *(pow_10 + 8) = 100000000
    *(pow_10 + 9) = 1000000000

    if (*(s + 0)) == '-' {
        is_negative = 1
        s = s + 1
    }

    l = string_length(s)

    if (*(s + 0)) == '0' {
        if (*(s + 1)) == 'x' {
            while (*(s + (l - 1 - i))) != 'x' {
                c = *(s + (l - 1 - i))
                if c > '9' {
                    c = c - 39
                }
                c = c & 0xff
                r = r | (c << (i << 2))
                i = i + 1
            }
        } else {
            return 0
        }
    }
}

// SECTION: stream

var STANDARD_INPUT int = 0
var STANDARD_OUTPUT int = 1
var STANDARD_ERROR int = 2

func stream_read(stream int, buffer *uint8, buffer_size int) int {
    var p *int
    var dp **uint8
    var bytes_count int

    p = 0x1000
    *p = 2

    p = 0x1004
    *p = stream

    dp = 0x1008
    *dp = buffer

    p = 0x100c
    *p = buffer_size

    ecall()

    p = 0x2004
    bytes_count = *p

    return bytes_count
}

// SECTION: scanner

var TT_ILLEGAL int = 0

var TT_COMMENT int = 1

var TT_IDENT int = 2
var TT_INT int = 3
var TT_CHAR int = 4
var TT_STRING int = 5

var TT_ADD int = 6
var TT_SUB int = 7
var TT_MUL int = 8
var TT_QUO int = 9
var TT_REM int = 10

var TT_AND int = 11
var TT_OR int = 12
var TT_XOR int = 13
var TT_SHL int = 14
var TT_SHR int = 15

var TT_LAND int = 16
var TT_LOR int = 17

var TT_EQL int = 18
var TT_LSS int = 19
var TT_GTR int = 20
var TT_ASSIGN int = 21
var TT_NOT int = 22

var TT_NEQ int = 23
var TT_LEQ int = 24
var TT_GEQ int = 25

var TT_LPAREN int = 26
var TT_LBRACK int = 27
var TT_LBRACE int = 28
var TT_COMMA int = 29
var TT_PERIOD int = 30

var TT_RPAREN int = 31
var TT_RBRACK int = 32
var TT_RBRACE int = 33
var TT_SEMICOLON int = 34
var TT_COLON int = 35

var TT_WHILE int = 36
var TT_BREAK int = 37
var TT_CONTINUE int = 38
var TT_IF int = 39
var TT_ELSE int = 40
var TT_FUNC int = 41
var TT_RETURN int = 42
var TT_VAR int = 43

var TT_SPACE = 44
var TT_NEW_LINE = 45

var TT_EOF int = 46

var source_code *uint8
var byte_code *uint8

var scanner_current int

var scanner_strings *uint8

var scanner_string_uint8 int
var scanner_string_int int

func scanner_is_at_end() uint8 {
    return (*(source_code + scanner_current)) == 0
}

func scanner_advance() uint8 {
    var c uint8 = *(source_code + scanner_current)

    scanner_current = scanner_current + 1

    return c
}

func scanner_peek() uint8 {
    return *(source_code + scanner_current)
}

func scanner_is_digit(c uint8) uint8 {
    return c >= 0x30 && c <= 0x39
}

func scanner_is_printable(c uinb8) uint8 {
    return c >= 0x20 && c <= 0x7e
}

func scanner_is_alphabet(c uint8) uint8 {
    return (c >= 0x41 && c <= 0x5a) || (c >= 0x61 && c <= 0x7a) || (c == 0x5f)
}

func scanner_strings_add(s *uint8) int {
    var i int
    var l int

    l = string_length(scanner_strings + i)
    while l != 0 {
        if strings_compare(scanner_strings + i, s) == 0 {
            return i
        } else {
            i = i + l + 1
            l = string_length(scanner_strings + i)
        }
    }

    memory_copy(scanner_strings + i, s, string_length(s))

    return i
}

func scanner_strings_add_from_source_code(low_bound int, high_bound int) int {
    var array_temp [256]uint8
    var s *uint8 = &(array_temp[0])

    memory_copy(s, source_code + low_bound, high_bound - low_bound)

    return scanner_strings_add(s)
}

func scanner_is_keyword(low_bound int, high_bound int) int {
    var array_temp [256]uint8
    var s *uint8 = &(array_temp[0])

    memory_copy(s, source_code + low_bound, high_bound - low_bound)

    var _while_ []uint8 = "while"
    var _break_ []uint8 = "break"
    var _continue_ []uint8 = "continue"
    var _if_ []uint8 = "if"
    var _else_ []uint8 = "else"
    var _func_ []uint8 = "func"
    var _return_ []uint8 = "return"
    var _var_ []uint8 = "var"

    if strings_compare(s, &(_while_[0])) == 0 {
        return TT_WHILE
    } else if strings_compare(s, &(_break_[0])) == 0 {
        return TT_BREAK
    } else if strings_compare(s, &(_continue_[0])) == 0 {
        return TT_CONTINUE
    } else if strings_compare(s, &(_if_[0])) == 0 {
        return TT_IF
    } else if strings_compare(s, &(_else_[0])) == 0 {
        return TT_ELSE
    } else if strings_compare(s, &(_func_[0])) == 0 {
        return TT_FUNC
    } else if strings_compare(s, &(_return_[0])) == 0 {
        return TT_RETURN
    } else if strings_compare(s, &(_var_[0])) == 0 {
        return TT_VAR
    } else {
        return TT_ILLEGAL
    }
}

func scanner_scan_token() [2]int {
    var token [2]int

    var scanner_start int = scanner_current

    var c uint8 = scanner_advance()

    if c == '+' {

        token[0] = TT_ADD

    } else if c == '-' {

        token[0] = TT_SUB

    } else if c == '*' {

        token[0] = TT_MUL

    } else if c == '/' {

        if scanner_peek() == '/' {
            scanner_advance()
            while scanner_peek() != '\n' {
                scanner_advance()
            }
            token[0] = TT_COMMENT
        } else {
            token[0] = TT_QUO
        }

    } else if c == '%' {

        token[0] = TT_REM

    } else if c == '&' {

        if scanner_peek() == '&' {
            scanner_advance()
            token[0] = TT_LAND
        } else {
            token[0] = TT_ADD
        }

    } else if c == '|' {

        if scanner_peek() == '|' {
            scanner_advance()
            token[0] = TT_LOR
        } else {
            token[0] = TT_OR
        }

    } else if c == '^' {

        token[0] = TT_XOR

    } else if c == '<' {

        if scanner_peek() == '<' {
            scanner_advance()
            token[0] = TT_SHL
        } else {
            token[0] = TT_LSS
        }

    } else if c == '>' {

        if scanner_peek() == '>' {
            scanner_advance()
            token[0] = TT_SHR
        } else {
            token[0] = TT_GTR
        }

    } else if c == '=' {

        if scanner_peek() == '=' {
            scanner_advance()
            token[0] = TT_EQL
        } else {
            token[0] = TT_ASSIGN
        }

    } else if c == '!' {

        token[0] = TT_NOT

    } else if c == '(' {

        token[0] = TT_LPAREN

    } else if c == '[' {

        token[0] = TT_LBRACK

    } else if c == '{' {

        token[0] = TT_LBRACE

    } else if c == ',' {

        token[0] = TT_COMMA

    } else if c == '.' {

        token[0] = TT_PERIOD

    } else if c == ')' {

        token[0] = TT_RPAREN

    } else if c == ']' {

        token[0] = TT_RBRACK

    } else if c == '}' {

        token[0] = TT_RBRACE

    } else if c == ';' {

        token[0] = TT_SEMICOLON

    } else if c == ':' {

        token[0] = TT_COLON

    } else if c == ' ' {

        while scanner_peek() == ' ' {
            scanner_advance()
        }
        token[0] = TT_SPACE

    } else if c == '\n' {

        while scanner_peek() == '\n' {
            scanner_advance()
        }
        token[0] = TT_NEW_LINE

    } else if scanner_is_digit(c) {

        while scanner_is_alphabet(scanner_peek()) || scanner_is_digit(scanner_peek()) {
            scanner_advance()
        }
        token[0] = TT_INT
        token[1] = scanner_strings_add_from_source_code(scanner_start, scanner_current)

    } else if scanner_is_alphabet(c) {

        while scanner_is_alphabet(scanner_peek()) || scanner_is_digit(scanner_peek()) {
            scanner_advance()
        }

        var token_type int = scanner_is_keyword(scanner_start, scanner_current)

        if token_type == TT_ILLEGAL {
            token[0] = TT_IDENT
            token[1] = scanner_strings_add_from_source_code(scanner_start, scanner_current)
        } else {
            token[0] = token_type
        }

    }

    if token[0] == TT_SPACE || token[0] == TT_COMMENT {
        return scanner_scan_token()
    } else {
        return token
    }
}

func scanner_init() {
    source_code = memory_allocate(65536)

    stream_read(STANDARD_INPUT, source_code, 65536)

    scanner_strings = memory_allocate(65536)

    var _uint8_ []uint8 = "uint8"
    var _int_ []uint8 = "int"

    scanner_string_uint8 = scanner_strings_add(&(_uint8_[0]))
    scanner_string_int = scanner_strings_add(&(_int_[0]))
}

// SECTION: compiler

var compiler_table_global *int
var compiler_table_local *int

// Table structure:
// Is Used, Identifier, Variable type, Address,
// Integer size, Is Signed, Pointer level, Array capacity

var compiler_is_compiling_function uint8

var compiler_global_variables_free_memory int

func compiler_table_global_add(identifier int, variable_type int, pointer_level int, array_capacity) int {
    var i int
    var row *int
    while (*(compiler_table_global + i)) != 0 {
        i = i + 8
    }
    row = *(compiler_table_global + i)
    *(row + 0) = 1
    *(row + 1) = identifier
    *(row + 2) = variable_type
    *(row + 3) = compiler_global_variables_free_memory

    if variable_type == scanner_string_uint8 {
        *(row + 4) = 1
        *(row + 5) = 0
    } else if variable_type == scanner_string_int {
        *(row + 4) = 4
        *(row + 5) = 1
    }

    compiler_global_variables_free_memory = compiler_global_variables_free_memory + (*(row + 4))

    *(row + 6) = pointer_level
    *(row + 7) = array_capacity
}

func compiler_compile_var_global() {
    var token [2]int = scanner_scan_token()

    var identifier = token[1]
    var variable_type int
    var pointer_level int
    var array_capacity int

    token = scanner_scan_token()

    if token[0] == TT_MUL {
        pointer_level = pointer_level + 1

        token = scanner_scan_token()
        while token[0] == TT_MUL {
            pointer_level = pointer_level + 1
            token = scanner_scan_token()
        }
    } else if token[0] == TT_LBRACK {
    }

    variable_type = token_type[1]
}

func compiler_compile_var() {
    if compiler_is_compiling_function {
        compiler_compile_var_local()
    } else {
        compiler_compile_var_global()
    }
}

func compiler_continue() {
    var token [2]int = scanner_scan_token()

    if token[0] == TT_VAR {
        compiler_compile_var()
    }
}

func compiler_start() {
    compiler_continue()
}

func compiler_init() {
    scanner_init()

    compiler_table_global = (*int)(memory_allocate(65536))
    compiler_table_local = (*int)(memory_allocate(65536))

    byte_code = memory_allocate(65536)
}

// SECTION: main

func main() {
    compiler_init()
    compiler_start()
}
