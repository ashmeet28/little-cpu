var source_code_array [8192]uint8
var byte_code_array [8192]uint8

var source_code *uint8 = &source_code_array[0]
var byte_code *uint8 = &byte_code_array[0]

// Tokens
var T_ILLEGAL int = 0
var T_EOF int = 1

var T_IDENT int = 2
var T_INT int = 3
var T_CHAR int = 4
var T_STRING int = 5

var T_ADD int = 6
var T_SUB int = 7
var T_MUL int = 8
var T_QUO int = 9
var T_REM int = 10

var T_AND int = 11
var T_OR int = 12
var T_XOR int = 13
var T_SHL int = 14
var T_SHR int = 15

var T_ADD_ASSIGN int = 16
var T_SUB_ASSIGN int = 17
var T_MUL_ASSIGN int = 18
var T_QUO_ASSIGN int = 19
var T_REM_ASSIGN int = 20

var T_AND_ASSIGN int = 21
var T_OR_ASSIGN int = 22
var T_XOR_ASSIGN int = 23
var T_SHL_ASSIGN int = 24
var T_SHR_ASSIGN int = 25

var T_LAND int = 26
var T_LOR int = 27
var T_ARROW int = 28
var T_INC int = 29
var T_DEC int = 30

var T_EQL int = 31
var T_LSS int = 32
var T_GTR int = 33
var T_ASSIGN int = 34
var T_NOT int = 35

var T_NEQ int = 36
var T_LEQ int = 37
var T_GEQ int = 38

var T_LPAREN int = 39
var T_LBRACK int = 40
var T_LBRACE int = 41
var T_COMMA int = 42
var T_PERIOD int = 43

var T_RPAREN int = 44
var T_RBRACK int = 45
var T_RBRACE int = 46
var T_SEMICOLON int = 47
var T_COLON int = 48

var T_WHILE int = 49
var T_BREAK int = 50
var T_CONTINUE int = 51
var T_IF int = 52
var T_ELSE int = 53
var T_FUNC int = 54
var T_RETURN int = 55
var T_STRUCT int = 56
var T_TYPE int = 57
var T_VAR int = 58

func read_stream(stream int, buffer *uint8, buffer_size int) int {
    var p *int
    var bytes_count int

    p = 0x1000
    *p = 2

    p = 0x1004
    *p = stream

    p = 0x1008
    *p = int(buffer)

    p = 0x100c
    *p = buffer_size

    ecall()

    p = 0x2004
    bytes_count = *p
    return bytes_count
}

var scanner_current int = 0

func scanner_is_at_end() uint8 {
    var c uint8
    var p *uint8 = source_code + scanner_current
    c = *p
    if c {
        return 1
    } else {
        return 0
    }
}

func scanner_advance() uint8 {
    var c uint8
    var p *uint8 = source_code + scanner_current
    c = *p
    scanner_current = scanner_current + 1
    return c
}

func scanner_peek() uint8 {
    var c uint8
    var p *uint8 = source_code + scanner_current
    p = p + 1
    c = *p
    return c
}

func scanner_is_digit(c uint8) uint8 {
    var t1 uint8 = c >= 0x30
    var t2 uint8 = c <= 0x39
    var t3 uint8 = t1 && t2
    return t3
}

func scanner_is_printable(c uint8) uint8 {
    var t1 uint8 = c >= 0x20
    var t2 uint8 = c <= 0x7e
    var t3 uint8 = t1 && t2
    return t3
}

func scanner_is_alphabet(c uint8) uint8 {
    var t1 uint8 = c >= 0x41
    var t2 uint8 = c <= 0x5a

    var t3 uint8 = c >= 0x61
    var t4 uint8 = c <= 0x7a

    var t5 uint8 = c >= 0x5f

    var t6 uint8 = t1 && t2
    var t7 uint8 = t3 && t4

    var t8 uint8 = t6 || t7
    var t9 uint8 = t8 || t5
    return t9
}

func scanner_scan_token() {
}

func init_global_variables() {
}

func main() {
    init_global_variables()
}
