var array_free_memory [16777216]uint8
var free_memory *uint8 = array_free_memory[0]

func memory_allocate(amount int) *uint8 {
    var p *uint8 = free_memory

    if (amount & 0x3) != 0 {
        amount = amount + 4 - (amount & 0x3)
    }

    free_memory = free_memory + amount

    return p
}

func read_stream(stream int, buffer *uint8, buffer_size int) int {
    var p *int
    var bytes_count int

    p = 0x1000
    *p = 2

    p = 0x1004
    *p = stream

    p = 0x1008
    *p = int(buffer)

    p = 0x100c
    *p = buffer_size

    ecall()

    p = 0x2004
    bytes_count = *p

    return bytes_count
}

// Tokens

var T_ILLEGAL int = 0

var T_COMMENT int = 1

var T_IDENT int = 2
var T_INT int = 3
var T_CHAR int = 4
var T_STRING int = 5

var T_ADD int = 6
var T_SUB int = 7
var T_MUL int = 8
var T_QUO int = 9
var T_REM int = 10

var T_AND int = 11
var T_OR int = 12
var T_XOR int = 13
var T_SHL int = 14
var T_SHR int = 15

var T_LAND int = 16
var T_LOR int = 17

var T_EQL int = 18
var T_LSS int = 19
var T_GTR int = 20
var T_ASSIGN int = 21
var T_NOT int = 22

var T_NEQ int = 23
var T_LEQ int = 24
var T_GEQ int = 25

var T_LPAREN int = 26
var T_LBRACK int = 27
var T_LBRACE int = 28
var T_COMMA int = 29
var T_PERIOD int = 30

var T_RPAREN int = 31
var T_RBRACK int = 32
var T_RBRACE int = 33
var T_SEMICOLON int = 34
var T_COLON int = 35

var T_WHILE int = 36
var T_BREAK int = 37
var T_CONTINUE int = 38
var T_IF int = 39
var T_ELSE int = 40
var T_FUNC int = 41
var T_RETURN int = 42
var T_STRUCT int = 43
var T_TYPE int = 44
var T_VAR int = 45

var T_SPACE = 46
var T_NEW_LINE = 47

var T_EOF int = 48

func strings_compare(a *uint8, b *uint8) int {
}

var scanner_current int

var source_code *uint8
var byte_code *uint8

func scanner_is_at_end() uint8 {
    return (*(source_code + scanner_current)) == 0
}

func scanner_advance() uint8 {
    var c uint8 = *(source_code + scanner_current)

    scanner_current = scanner_current + 1

    return c
}

func scanner_peek() uint8 {
    return *(source_code + scanner_current)
}

func scanner_is_digit(c uint8) uint8 {
    return c >= 0x30 && c <= 0x39
}

func scanner_is_printable(c uinb8) uint8 {
    return c >= 0x20 && c <= 0x7e
}

func scanner_is_alphabet(c uinb8) uint8 {
    return (v[0] >= 0x41 && v[0] <= 0x5a) || (v[0] >= 0x61 && v[0] <= 0x7a) || (v[0] == 0x5f)
}

func scanner_is_keyword(low_bound int, high_bound int) int {
}

func scanner_scan_token() [4]int {
    var token [4]int

    var scanner_start int

    var c1 uint8
    var c2 uint8
    var c3 uint8

    var b1 uint8
    var b2 uint8
    var b3 uint8
    var b4 uint8

    scanner_start = scanner_current

    c1 = scanner_advance()

    b1 = c1 == '+'
    if b1 {
        token[0] = T_ADD
    }

    b1 = c1 == '-'
    if b1 {
        token[0] = T_SUB
    }

    b1 = c1 == '*'
    if b1 {
        token[0] = T_MUL
    }

    b1 = c1 == '/'
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == '/'
        if b2 {
            scanner_advance()
            c3 = scanner_peek()
            b3 = c3 != 0x0a
            while b3 {
                scanner_advance()
                c3 = scanner_peek()
                b3 = c3 != 0x0a
            }
            token[0] = T_COMMENT
        } else {
            token[0] = T_QUO
        }
    }

    b1 = c1 == '%'
    if b1 {
        token[0] = T_REM
    }

    b1 = c1 == '&'
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == '&'
        if b2 {
            scanner_advance()
            token[0] = T_LAND
        } else {
            token[0] = T_ADD
        }
    }

    b1 = c1 == '|'
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == '|'
        if b2 {
            scanner_advance()
            token[0] = T_LOR
        } else {
            token[0] = T_OR
        }
    }

    b1 = c1 == '^'
    if b1 {
        token[0] = T_XOR
    }

    b1 = c1 == '<'
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == '<'
        if b2 {
            scanner_advance()
            token[0] = T_SHL
        } else {
            token[0] = T_LSS
        }
    }

    b1 = c1 == '>'
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == '>'
        if b2 {
            scanner_advance()
            token[0] = T_SHR
        } else {
            token[0] = T_GTR
        }
    }

    b1 = c1 == '='
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == '='
        if b2 {
            scanner_advance()
            token[0] = T_EQL
        } else {
            token[0] = T_ASSIGN
        }
    }

    b1 = c1 == '!'
    if b1 {
        token[0] = T_NOT
    }

    b1 = c1 == '('
    if b1 {
        token[0] = T_LPAREN
    }

    b1 = c1 == '['
    if b1 {
        token[0] = T_LBRACK
    }

    b1 = c1 == '{'
    if b1 {
        token[0] = T_LBRACE
    }

    b1 = c1 == ','
    if b1 {
        token[0] = T_COMMA
    }

    b1 = c1 == '.'
    if b1 {
        token[0] = T_PERIOD
    }

    b1 = c1 == ')'
    if b1 {
        token[0] = T_RPAREN
    }

    b1 = c1 == ']'
    if b1 {
        token[0] = T_RBRACK
    }

    b1 = c1 == '}'
    if b1 {
        token[0] = T_RBRACE
    }

    b1 = c1 == ';'
    if b1 {
        token[0] = T_SEMICOLON
    }

    b1 = c1 == ':'
    if b1 {
        token[0] = T_COLON
    }

    b1 = c1 == ' '
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == ' '
        while b2 {
            scanner_advance()
            c2 = scanner_peek()
            b2 = c2 == ' '
        }
        token[0] = T_SPACE
    }

    b1 = c1 == 0x0a
    if b1 {
        c2 = scanner_peek()
        b2 = c2 == 0x0a
        b3 = c2 == ' '
        b4 = b2 || b3
        while b4 {
            scanner_advance()
            c2 = scanner_peek()
            b2 = c2 == 0x0a
            b3 = c2 == ' '
            b4 = b2 || b3
        }
        token[0] = T_NEW_LINE
    }

    b1 = scanner_is_digit(c1)
    if b1 {
        c2 = scanner_peek()
        b2 = c2 != 0x0a
        b3 = c2 != ' '
        b4 = b2 && b3
        while b4 {
            scanner_advance()
            c2 = scanner_peek()
            b2 = c2 == 0x0a
            b3 = c2 == ' '
            b4 = b2 && b3
        }
        token[0] = T_INT
        token[1] = scanner_start
        token[2] = scanner_current
    }

    b1 = scanner_is_alphabet(c1)
    if b1 {
        c2 = scanner_peek()
        b2 = c2 != 0x0a
        b3 = c2 != ' '
        b4 = b2 && b3
        while b4 {
            scanner_advance()
            c2 = scanner_peek()
            b2 = c2 == 0x0a
            b3 = c2 == ' '
            b4 = b2 && b3
        }
        token[0] = T_IDENT
        token[1] = scanner_start
        token[2] = scanner_current
    }

    return token
}

func init_global_variables() {
    source_code = memory_allocate(65536)
    byte_code = memory_allocate(65536)
}

func main() {
    init_global_variables()
}
